#!/bin/bash
#adamwangpc
#it will update your packages !

OBJ=""
CURDIR=$PWD
INSTALLLOG=$CURDIR"/$0.log"
CORES=`cat /proc/cpuinfo | grep "processor" | wc -l`

function ECHO()
{
    mode="\033[0m"
    case "$1" in
        INFO)   mode="\033[34;1m";;#bule
        USER)   mode="\033[32;1m";;#green
        WARN)   mode="\033[33;1m";;#yellow
        ERROR)  mode="\033[31;1m";;#red
        *)      mode="\033[32;1m";;#green
    esac
    echo -e "$mode$@\033[0m"
    echo -e "$@" >> $INSTALLLOG
}

#Usage:exe cmd {params...}
function exe()
{
    ECHO INFO "[$0]:$@"
    $@
    ret=$?
    if [ $ret -ne 0 ];then
        ECHO ERROR "[$0]:failed, cmd=$@, ret=$ret"
        exit -3
    fi
    ECHO USER "[$0]:success, cmd=$@"
}

#Usage:get url {rename}
function get()
{
    file=${1##*/}
    rename=$2
    ECHO INFO "[$0]:$@"
    if [ ! -f $file ];then
        rm -fr $file
        if [ "$rename" = "" ];then
            exe wget "$1"
        else
            exe wget -O "$2" "$1"
        fi
    fi
    ECHO USER "[$0]:success, cmd=$@"
}

#Usage:get url {rename}
function get()
{
    file=${1##*/}
    rename=$2
    ECHO INFO "[$0]:$@"
    if [ ! -f $file ];then
        rm -fr $file
        if [ "$rename" = "" ];then
            exe wget "$1"
        else
            exe wget -O "$2" "$1"
        fi
    fi
    ECHO USER "[$0]:success, cmd=$@"
}

#unzip all format compressed file
#Usage:uz file
function uz()
{
    ECHO INFO "[$0]:$@"
    ftype=`file "$1"`   # Note ' and ` is different
    case "$ftype" in
        "$1: Zip archive"*)
            exe unzip "$1" ;;
        "$1: gzip compressed"*)
            exe tar zxvf "$1" ;;
        "$1: bzip2 compressed"*)
            exe tar jxvf "$1" ;;
        "$1: XZ compressed data"*)
            exe tar xf "$1" ;;
        "$1: 7-zip archive data"*)
            exe 7za x "$1" ;;
        *) echo "File $1 can not be unzip";;
    esac
    ECHO USER "[$0]:end, cmd=$@"
}

#Usage:remove srcdir
function remove()
{
    d=$1
    ECHO INFO "[$0]:$@"
    if [ -d "$d" ];then
        cd $d && make uninstall
        make clean
        cd ..
        rm -fr $d
    fi
    ECHO USER "[$0]:end, cmd=$@"
}

#Usage:addcron line
function addcron()
{
    ECHO INFO "[$0]:$@"
    crontab -l > /tmp/crontable
    echo "$@" >> /tmp/crontable
    exe crontab /tmp/crontable
    ECHO USER "[$0]:end, cmd=$@"
}

function janus()
{
    sudo apt-get install -y aptitude
    sudo aptitude install -y libmicrohttpd-dev libjansson-dev libnice-dev libssl-dev libsofia-sip-ua-dev libglib2.0-dev libopus-dev libogg-dev pkg-config gengetopt libtool automake
    wget https://github.com/cisco/libsrtp/archive/v1.5.0.tar.gz && tar xvf v1.5.0.tar.gz && cd libsrtp-1.5.0
    ./configure --prefix=/usr --enable-openssl && make libsrtp.so && sudo make install && cd $CURDIR
    git clone https://github.com/sctplab/usrsctp && cd usrsctp
    ./bootstrap && ./configure --prefix=/usr && make -j$CORES && sudo make install && cd $CURDIR
    git clone https://github.com/warmcat/libwebsockets && cd libwebsockets
    mkdir -p build && cd build && cmake -DCMAKE_INSTALL_PREFIX:PATH=/usr -DCMAKE_C_FLAGS="-fpic" .. && make -j$CORES && sudo make install && cd $CURDIR
    git clone https://github.com/alanxz/rabbitmq-c && cd rabbitmq-c && git submodule init && git submodule update && autoreconf -i && ./configure --prefix=/usr && make -j$CORES && sudo make install && cd $CURDIR
    git clone https://github.com/meetecho/janus-gateway.git && cd janus-gateway && ./autogen.sh && ./configure --prefix=/usr/local/janus --enable-post-processing
    make -j$CORES
    make -j$CORES && sudo make install && sudo make configs && cd $CURDIR
    #    sudo ln -sf /usr/local/lib/librabbitmq.so   /usr/lib/librabbitmq.so.4
    #    sudo ln -sf /usr/local/lib/libsrtp.so  /usr/lib/libsrtp.so
    #    sudo ln -sf /usr/local/lib/libusrsctp.so /usr/lib/libusrsctp.so.1
}

function ffmpeg()
{
    sudo apt-get install -y gcc g++ cmake-curses-gui libsdl-dev make libtool libssl-dev libfreetype6-dev pkg-config patch bzip2 libvpx-dev
    uz ffmpeg-inst.tar.gz
    uz yasm-1.3.0.tar.gz
    uz fdk-aac-0.1.4.tar.gz
    uz last_x264.tar.bz2
    uz rtmpdump-2.3.tgz
    uz ffmpeg-2.8.5.tar.xz
    uz x265_2.0.tar.gz
    cd yasm-1.3.0 && ./configure && make -j$CORES && sudo make install && cd $CURDIR
    cd fdk-aac-0.1.4 && ./autogen.sh && ./configure --enable-shared && make -j$CORES && sudo make install && cd $CURDIR
    cd x264-snapshot-20160412-2245 && ./configure --enable-shared && make -j$CORES && sudo make install && cd $CURDIR
    cd rtmpdump-2.3 && cd librtmp && make -j$CORES && sudo make install && sudo cp librtmp/librtmp.pc /usr/local/lib/pkgconfig/ cd $CURDIR
    cd x265_2.0/build/linux && ./make-Makefiles.bash
    make -j$CORE && sudo make install && cd $CURDIR
    cd ffmpeg-2.8.5 && ./configure --enable-gpl --enable-postproc --enable-pthreads  --enable-nonfree --enable-shared --enable-libx264 --enable-libfdk-aac --enable-libfreetype --enable-network --enable-protocol=tcp --enable-demuxer=rtsp --enable-muxer=rtsp --enable-ffplay --enable-librtmp --prefix=/usr/local/ffmpeg/2.8.5 --extra-ldflags="-L/usr/local/lib" --extra-cflags="-I/usr/local/include" --extra-libs="-lrtmp" --enable-libvpx --enable-libx265 && make -j$CORES && sudo make install && cd $CURDIR
    sudo chmod 666 /etc/ld.so.conf && sudo chmod 666 /etc/bashrc
    sudo echo "/usr/local/ffmpeg/2.8.5/lib" >> /etc/ld.so.conf && sudo ldconfig
    sudo echo 'PATH=/usr/local/ffmpeg/2.8.5/bin:$PATH' >> /etc/bashrc && source /etc/bashrc
    sudo cp /usr/local/ffmpeg/2.8.5/lib/pkgconfig/*.pc /usr/local/lib/pkgconfig
}


#function kms()
#{
#    sudo apt-get -y update
#    sudo apt-get -y upgrade
#    sudo apt-get install -y g++ git cmake
#    mkdir -p kmsbuild && cd kmsbuild
#    CURDIR=$CURDIR/kmsbuild
#
#    git clone https://github.com/Kurento/kms-cmake-utils.git
#    cd kms-cmake-utils && mkdir -p build && cd build && cmake .. && sudo make install -j$CORE
#    cd $CURDIR
#
#    sudo apt-get install -y maven2 openjdk-7-jdk
#    git clone https://github.com/Kurento/kurento-module-creator.git
#    cd kurento-module-creator && mvn install
#    sudo mkdir -p /usr/local/target
#    sudo cp target/kurento-module-creator-jar-with-dependencies.jar /usr/local/target
#    sudo cp scripts/kurento-module-creator /usr/local/bin
#    sudo cp target/classes/FindKurentoModuleCreator.cmake /usr/local/share/cmake-2.8/Modules/
#    cd $CURDIR
#
#    git clone https://github.com/Kurento/jsoncpp.git
#    cd jsoncpp && git checkout kms6.6.0
#    mkdir -p build && cd build && cmake .. -DBUILD_STATIC_LIBS=ON -DBUILD_SHARED_LIBS=ON && sudo make install -j$CORE
#    cd $CURDIR
#    sudo apt-get install -y libboost1.55-all-dev pkg-config
#    git clone https://github.com/Kurento/kms-jsonrpc.git
#    cd kms-jsonrpc && mkdir -p build && cd build && cmake .. -DCMAKE_MODULE_PATH=/usr/local/share/cmake-2.8/Modules && sudo make install -j$CORE
#    cd $CURDIR
#
#    sudo apt-get install -y autoconf autopoint libtool bison flex gtk-doc-tools libglib2.0-dev liborc-dev
#    git clone https://github.com/Kurento/gstreamer.git
#    cd gstreamer && git checkout kms6.6.0
#    ./autogen.sh && ./configure && sudo make install -j$CORE
#    cd $CURDIR
#
#    git clone https://github.com/Kurento/gst-plugins-base.git
#    cd gst-plugins-base && git checkout kms6.6.0
#    ./autogen.sh && ./configure && sudo make install -j$CORE
#    cd $CURDIR
#
#    git clone https://github.com/Kurento/gst-plugins-bad.git
#    cd gst-plugins-bad && git checkout kms6.6.0
#    ./autogen.sh && ./configure && sudo make install -j$CORE
#    cd $CURDIR
#
#    git clone https://github.com/Kurento/gst-plugins-good.git
#    cd gst-plugins-good && git checkout kms6.6.0
#    ./autogen.sh && ./configure && sudo make install -j$CORE
#    cd $CURDIR
#
#    git clone https://github.com/Kurento/gst-plugins-ugly.git
#    cd gst-plugins-ugly && git checkout kms6.6.0
#    ./autogen.sh && ./configure && sudo make install -j$CORE
#    cd $CURDIR
#
#    git clone https://github.com/Kurento/gst-libav.git
#    cd gst-libav && git checkout kms6.6.0
#    ./autogen.sh && ./configure && sudo make install -j$CORE
#    cd $CURDIR
#
#    sudo apt-get install -y uuid-dev libvpx-dev libsigc++-2.0-dev libglibmm-2.4-dev
#    git clone https://github.com/Kurento/kms-core.git
#    cd kms-core && git checkout 6.6.0
#    mkdir -p build && cd build && cmake .. -DCMAKE_MODULE_PATH=/usr/local/share/cmake-2.8/Modules -DKURENTO_MODULES_DIR=/usr/local/share/kurento/modules && sudo make install -j$CORE
#    sudo mkdir -p /usr/share/kurento/modules && sudo cp ./src/server/kmd/core.kmd.json /usr/share/kurento/modules
#    cd $CURDIR
#
#    git clone https://github.com/Kurento/usrsctp.git
#    cd usrsctp && ./bootstrap && ./configure && sudo make install -j$CORE
#    cd $CURDIR
#
#    git clone https://github.com/Kurento/openwebrtc-gst-plugins.git
#    cd openwebrtc-gst-plugins && git checkout kms6.6.0
#    ./autogen.sh && ./configure && make && sudo make install
#    cd $CURDIR
#
#    sudo apt-get install -y libsoup2.4-dev
#    git clone https://github.com/Kurento/libnice.git
#    cd libnice && git checkout 0.1.13
#    ./autogen.sh && ./configure && sudo make install -j$CORE
#    cd $CURDIR
#
#    git clone https://github.com/Kurento/kms-elements.git
#    cd kms-elements && git checkout 6.6.0
#    mkdir -p build && cd build && cmake .. -DCMAKE_MODULE_PATH=/usr/local/share/cmake-2.8/Modules -DKURENTO_MODULES_DIR=/usr/local/share/kurento/modules && sudo make install -j$CORE
#    sudo cp ./src/server/kmd/elements.kmd.json /usr/share/kurento/modules
#    cd $CURDIR
#
#    sudo apt-get install -y libopencv-dev
#    git clone https://github.com/Kurento/kms-filters.git
#    cd kms-filters && git checkout 6.6.0
#    mkdir -p build && cd build && cmake .. -DCMAKE_MODULE_PATH=/usr/local/share/cmake-2.8/Modules && sudo make install -j$CORE
#    cd $CURDIR
#
#    sudo apt-get install -y libssl-dev libevent-dev
#    git clone https://github.com/Kurento/kurento-media-server.git
#    cd kurento-media-server && git checkout 6.6.0
#    mkdir -p build && cd build && cmake .. -DCMAKE_MODULE_PATH=/usr/local/share/cmake-2.8/Modules && sudo make install -j$CORE
#    cd $CURDIR
#
#    sudo sh -c "echo /usr/local/lib/x86_64-linux-gnu >> /etc/ld.so.conf.d/x86_64-linux-gnu.conf" && sudo ldconfig
#    sudo mkdir -p /etc/kurento/ && sudo cp ./kurento-media-server/kurento.conf.json /etc/kurento/kurento.conf.json
#}
#


#https://github.com/Kurento/doc-kurento/blob/master/static/kms_development_guide.md#install-kms-fork-libraries
function kms()
{
    #Install development tools
    sudo apt-get update
    sudo apt-get install -y --no-install-recommends build-essential gdb pkg-config cmake clang debhelper valgrind git wget maven 'openjdk-[8|7]-jdk'
    #Install development libraries for KMS
    sudo apt-get install -y --no-install-recommends libboost-dev libboost-filesystem-dev libboost-log-dev libboost-program-options-dev libboost-regex-dev libboost-system-dev libboost-test-dev libboost-thread-dev libevent-dev libglib2.0-dev libglibmm-2.4-dev libsigc++-2.0-dev libopencv-dev
    #Install KMS fork libraries trusty--14.04
    REPO="trusty"
    echo "deb http://ubuntu.kurento.org ${REPO} kms6" | sudo tee /etc/apt/sources.list.d/kurento.list
    wget http://ubuntu.kurento.org/kurento.gpg.key -O - | sudo apt-key add -
    sudo apt-get update
    sudo apt-get install -y --no-install-recommends libgstreamer1.5-dev libgstreamer-plugins-base1.5-dev gstreamer1.5-plugins-base gstreamer1.5-plugins-good gstreamer1.5-plugins-bad gstreamer1.5-plugins-ugly gstreamer1.5-libav gstreamer1.5-nice libnice-dev openwebrtc-gst-plugins-dev libvpx-dev libxml2-utils uuid-dev libsoup2.4-dev libssl-dev kmsjsoncpp-dev ffmpeg
    #sudo apt-get install -y --no-install-recommends libgstreamer1.5-0-dbg gstreamer1.5-plugins-base-dbg gstreamer1.5-plugins-good-dbg gstreamer1.5-plugins-bad-dbg gstreamer1.5-plugins-ugly-dbg gstreamer1.5-libav-dbg libnice-dbg openwebrtc-gst-plugins-dbg kmsjsoncpp-dbg
    #build kms
    git clone https://github.com/Kurento/kms-omni-build.git
    cd kms-omni-build
    git submodule init
    git submodule update --recursive --remote
    cd kms-elements && git checkout 6.6.2 && cd ..
    cd kms-filters && git checkout 6.6.2 && cd ..
    cd kms-core && git checkout 6.6.2 && cd ..
    cd kurento-media-server && git checkout 6.6.2 && cd ..
    #TYPE: Debug Release RelWithDebInfo
    TYPE=Release
    mkdir -p build-$TYPE && cd build-$TYPE
    cmake -DCMAKE_BUILD_TYPE=$TYPE -DCMAKE_VERBOSE_MAKEFILE=ON ..
    make 
#    sudo make install
#    sudo sh -c "echo /usr/local/lib/x86_64-linux-gnu >> /etc/ld.so.conf.d/x86_64-linux-gnu.conf" && sudo ldconfig
#    sudo mkdir -p /etc/kurento && sudo cp ../kurento-media-server/kurento.conf.json /etc/kurento/

}

function clean_kms()
{
    for pkg in \
      '^(kms|kurento).*' \
      ffmpeg \
      '^gir1.2-gst.*1.5' \
      '^(lib)?gstreamer.*1.5.*' \
      '^lib(nice|s3-2|srtp|usrsctp).*' \
      '^srtp-.*' \
      '^openh264(-gst-plugins-bad-1.5)?' \
      '^openwebrtc-gst-plugins.*' \
      '^libboost-?(filesystem|log|program-options|regex|system|test|thread)?-dev' \
      '^lib(glib2.0|glibmm-2.4|opencv|sigc++-2.0|soup2.4|ssl|tesseract|vpx)-dev' \
      uuid-dev
    do sudo apt-get -y purge --auto-remove $pkg ; done

}



ECHO "\n`date`\n######install######\n"
ECHO INFO "install:$0 $@"
ECHO INFO "log=$INSTALLLOG"
if [ "$1" != "" ];then
    OBJ=$1
fi
case "$OBJ" in
    janus) janus;;
    ffmpeg) ffmpeg;;
    kms) kms;;
    clean_kms) clean_kms;;
    *)      echo "Usage: {janus|ffmpeg|kms}" >&2
        echo "tested in ubuntu14.04" >&2
        exit 1
        ;;
esac
ECHO INFO"install end:$0!"

